module Main where

import System.Environment (getArgs)
import qualified Data.ByteString.Char8 as BC

import Data.Blend

info :: [String]
info = 
  [ "This is hblend."
  , "(c) 2009 Vo Minh Thu."
  , "All rights reserved."
  ]

usage :: [String]
usage = info ++
  ["usage: hblend filename.blend [structure-name]"]

main :: IO ()
main = do
  args <- getArgs
  if null args
    then putStrLn $ unlines usage
    else do
      let fn = head args
      blend <- readBBlend fn
      case args of
        [_] -> putStr (show blend)
        [_, "haskell"] -> do let sdna = blendSdna blend
                             putStrLn "{-# LANGUAGE OverloadedStrings #-}"
                             putStrLn "-- automatically generated by hblend from a .blend file."
                             putStrLn $ "module  Data.Blend.B" ++ BC.unpack (versionNumber $ blendHeader blend) ++ " where"
                             putStrLn "import Data.Int"
                             putStrLn "import Data.Word"
                             putStrLn "import Data.ByteString"
                             putStrLn "import qualified Data.ByteString.Lazy as LB"
                             putStrLn "import qualified Data.ByteString.Char8 as BC"
                             putStrLn "import Data.Binary"
                             putStrLn "import Data.Binary.Get (bytesRead, getByteString, getWord64be, getWord32be, getWord16be,  getWord64le, getWord32le, getWord16le, skip, runGet)"
                             putStrLn "import Control.Monad (replicateM)"
                             putStrLn "import Data.Blend"
                             mapM_ (putStrLn . showStructAsStruct) sdna
                             putStrLn $ showSDNAAsSDNA sdna
                             mapM_ (putStrLn . showStructAsHs) sdna
                             mapM_ (putStrLn . showStructParser) sdna
                             putStrLn $ showSDNAAsHs sdna
                             putStrLn $ showBlockParser sdna
        [_, "html"] -> do let sdna = blendSdna blend
                          putStrLn "<html><head><title>SDNA structures</title></head><body>\n"
                          mapM_ putStrLn $ zipWith showStructAsHtml [(0::Integer)..] sdna
                          putStrLn "</body></html>\n"
        [_, struct ] -> do let ms = lookupStruct blend struct
                           case ms of
                             Nothing -> putStrLn "No such structure."
                             Just fs -> putStrLn $ showStruct fs
        _ -> putStrLn $ unlines usage
  
